#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejs-user-api:server');
var http = require('http');
const { createTerminus } = require('@godaddy/terminus');
const db = require("../models");
const { devNull } = require('os');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


function onAppSignal () {
  console.log('server is starting cleanup');
  return Promise.all([
    db.sequelize.close()
  ]);
}

function onAppShutdown () {
  console.log('cleanup finished, server is shutting down');
}

function healthCheck ({ state }) {
  // `state.isShuttingDown` (boolean) shows whether the server is shutting down or not
  return Promise.resolve(
    {
      status: "healthy",
      uptime: process.uptime()
    }
  )
}

function  livenessCheck ({state}){
  console.log("liveness check has passed")
  return Promise.resolve(
  )
}
function  readinessCheck ({state}){
  return new Promise((resolve, reject) => {
    db.sequelize.authenticate().then((data)=>{
      console.log("readiness check has passed")
      return resolve(data)
    })
    .catch((err)=>{
      console.log("readiness check has failed")
      return reject(err)
    })
  })
}

const options = {
  healthChecks: {
    "/health": healthCheck,
    "/live": livenessCheck,
    "/ready": readinessCheck,
    verbatim: true,
    __unsafeExposeStackTraces: true,
  },
  headers: {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "OPTIONS, POST, GET",
  },
  statusOk: 200,
  statusError: 503,
  onSignal: onAppSignal,
  onShutdown: onAppShutdown

};

createTerminus(server, options);